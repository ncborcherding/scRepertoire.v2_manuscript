---
title: "scRepertoire v2 Analysis"
format: pdf
editor: visual
date: 'Compiled: `r format(Sys.Date(), "%B %d, %Y")`'
author: 
  name: Nick Borcherding
  email: ncborch@gmail.com
  affiliation: Washington University in St. Louis, School of Medicine, St. Louis, MO, USA
---

## Loading Libraries

```{r message=FALSE, warning=FALSE, echo=T, results='hide'}
# Define required libraries
packages <- c(
  "Azimuth", "BiocParallel", "celldex", "dplyr", "ggplot2", 
  "ggthemes", "harmony", "igraph", "patchwork", "RColorBrewer", 
  "scDblFinder", "scGate", "scRepertoire", "scran", "Seurat", 
  "SeuratData", "SingleR", "stringr", "viridis"
)

# Suppress startup messages
suppressPackageStartupMessages(
  lapply(packages, library, character.only = TRUE)
)

# Load annotation references if not already present
if (!exists("HPCA")) {
  HPCA <- celldex::HumanPrimaryCellAtlasData()
}
if (!exists("Monaco")) {
  Monaco <- celldex::MonacoImmuneData()
}

# Set options
options(future.globals.maxSize = 8000 * 1024^2)

# Define custom negate function
"%!in%" <- Negate("%in%")
```

### Directory Setup

```{r}
# Define directories
qc_dir <- "./qc"
input_dir <- "./inputs/data/GSE169440"
output_dir <- "./output"
processed_dir <- "./inputs/data/processedData"

# Create directories if they do not exist
dir.create(qc_dir, showWarnings = FALSE)
dir.create(output_dir, showWarnings = FALSE)
dir.create(processed_dir, showWarnings = FALSE)
```

### Helper Functions

```{r}
# Save plots with consistent formatting
save_plot <- function(plot, filename, height = 3, width = 3, dpi = 300) {
  ggsave(filename = filename, plot = plot, height = height, width = width, 
         dpi = dpi)
}

# Calculate QC metrics
calculate_qc_metrics <- function(seurat_obj) {
  seurat_obj$nCount_RNA <- colSums(seurat_obj@assays$RNA@layers$counts)
  seurat_obj$nFeature_RNA <- colSums(seurat_obj@assays$RNA@layers$counts != 0)
  seurat_obj[["mito.genes"]] <- PercentageFeatureSet(seurat_obj, 
                                                     pattern = "^MT-")
  seurat_obj[["ribo.genes"]] <- PercentageFeatureSet(seurat_obj, 
                                                     pattern = "^RPS|RPL-")
  return(seurat_obj)
}

# Plot QC metrics
plot_qc_metrics <- function(seurat_obj, file_name, qc_dir) {
  p <- VlnPlot(
    object = seurat_obj,
    features = c("nCount_RNA", "nFeature_RNA", "mito.genes", "ribo.genes"),
    pt.size = 0,
    cols = "grey"
  ) +
    theme_minimal() +
    theme(legend.position = "none") +
    plot_layout(ncol = 2)

  save_plot(p, 
            file.path(qc_dir, paste0(file_name, "_metrics.pdf")), 
            height = 8, 
            width = 8)
}

# Filter cells based on QC metrics
filter_cells <- function(seurat_obj, file_name, qc_dir) {
  standev <- sd(log(seurat_obj$nFeature_RNA)) * 2
  mean_val <- mean(log(seurat_obj$nFeature_RNA))
  cut <- round(exp(standev + mean_val))

  p <- FeatureScatter(seurat_obj, 
                      feature1 = "nCount_RNA", 
                      feature2 = "nFeature_RNA") +
    geom_hline(yintercept = cut)

  save_plot(p, file.path(qc_dir, 
                         paste0(file_name, "_cutpoint.pdf")), 
            height = 8, 
            width = 8)

  seurat_obj <- subset(seurat_obj, 
                       subset = mito.genes < 10 & nFeature_RNA < cut)
  return(seurat_obj)
}
```

### Plot Standardization

```{r}
custom_theme <- theme_minimal(base_size = 8) +
  theme(
    axis.title = element_text(size = 8, color = "black"),
    axis.text = element_text(size = 6, color = "black"),
    legend.text = element_text(size = 4, color = "black"),
    legend.key.size = unit(0.1, "cm"),
    legend.title = element_text(size = 4, color = "black"),
    legend.position = c(1, 1),
    legend.justification = c("right", "top"),
    legend.box.just = "right",
    legend.margin = margin(6, 6, 6, 6),
    legend.spacing.y = unit(2, "cm")
  )
```

## Processing Sequencing Runs

```{r  message=FALSE, warning=FALSE, eval = FALSE}
# Setup
dir.create("./qc", showWarnings = FALSE)
file_list <- list.files("./inputs/data/GSE169440", full.names = FALSE) 

# Helper functions
calculate_qc_metrics <- function(seurat_obj) {
  seurat_obj$nCount_RNA <- colSums(seurat_obj@assays$RNA@layers$counts)
  seurat_obj$nFeature_RNA <- colSums(seurat_obj@assays$RNA@layers$counts != 0)
  seurat_obj[["mito.genes"]] <- PercentageFeatureSet(seurat_obj, 
                                                     pattern = "^MT-")
  seurat_obj[["ribo.genes"]] <- PercentageFeatureSet(seurat_obj, 
                                                     pattern = "^RPS|RPL-")
  return(seurat_obj)
}

plot_qc_metrics <- function(seurat_obj, file_name) {
  p <- VlnPlot(
    object = seurat_obj,
    features = c("nCount_RNA", "nFeature_RNA", "mito.genes", "ribo.genes"),
    pt.size = 0,
    cols = "grey"
  ) +
    theme(legend.position = "none") +
    plot_layout(ncol = 2)
  ggsave(paste0("./qc/", file_name, "_metrics.pdf"), 
         plot = p, 
         height = 8, 
         width = 8)
}

filter_cells <- function(seurat_obj, file_name) {
  standev <- sd(log(seurat_obj$nFeature_RNA)) * 2
  mean_val <- mean(log(seurat_obj$nFeature_RNA))
  cut <- round(exp(standev + mean_val))
  
  p <- FeatureScatter(seurat_obj, 
                      feature1 = "nCount_RNA", 
                      feature2 = "nFeature_RNA") +
    geom_hline(yintercept = cut)
  ggsave(paste0("./qc/", file_name, "_cutpoint.pdf"), 
         plot = p, 
         height = 8, 
         width = 8)
  
  seurat_obj <- subset(seurat_obj, 
                       subset = mito.genes < 10 & nFeature_RNA < cut)
  return(seurat_obj)
}

annotate_with_singler <- function(sce, ref, ref_name) {
  com.res <- SingleR(sce, 
                     ref = ref, 
                     labels = ref$label.fine, 
                     assay.type.test = 1)
  df <- data.frame("labels" = com.res$labels, 
                   "pruned.labels" = com.res$pruned.labels)
  rownames(df) <- rownames(com.res)
  colnames(df) <- paste0(ref_name, ".", colnames(df))
  return(df)
}

# Download and prepare reference datasets if not already present
if (!exists("HPCA")) {
  HPCA <- celldex::HumanPrimaryCellAtlasData()
}
if (!exists("Monaco")) {
  Monaco <- celldex::MonacoImmuneData()
}

# Main processing loop
for (file in file_list) {
  message("Processing ", file)
  
  # 1. Read Data and Create Seurat Object
  tmp <- Read10X(paste0("./inputs/data/GSE169440/", 
                        file, "/filtered_feature_bc_matrix/"))
  
  SeuratObj <- CreateSeuratObject(counts = tmp, 
                                  assay = "RNA", 
                                  project = file) %>%
    subset(subset = nFeature_RNA > 100) # Filter out low feature cells early
  
  # Remove tmp to free up memory
  rm(tmp)
  
  # 2. Calculate QC Metrics and Rename Cells
  SeuratObj <- calculate_qc_metrics(SeuratObj)
  SeuratObj <- RenameCells(SeuratObj, new.names = 
                             paste0(file, "_", colnames(SeuratObj)))

  # 3. Plot QC Metrics
  plot_qc_metrics(SeuratObj, file)

  # 4. Filter Cells
  SeuratObj <- filter_cells(SeuratObj, file)

  # 5. Estimate Doublets
  sce <- as.SingleCellExperiment(SeuratObj)
  sce <- scDblFinder(sce)
  doublets <- data.frame(db.class = sce$scDblFinder.class, 
                         db.score = sce$scDblFinder.score)
  rownames(doublets) <- rownames(sce@colData)
  SeuratObj <- AddMetaData(SeuratObj, doublets)

  # 6. Azimuth Annotation
  SeuratObj <- RunAzimuth(SeuratObj, reference = "pbmcref", verbose = FALSE)
  
  # 7. SingleR Annotation
  SeuratObj <- AddMetaData(SeuratObj, 
                           annotate_with_singler(sce, HPCA, "HPCA"))
  SeuratObj <- AddMetaData(SeuratObj, 
                           annotate_with_singler(sce, Monaco, "Monaco"))
  
  rm(sce)

  # 8. Add Clonal Information
  TCR.file <- list.files(paste0("./inputs/data/GSE169440/", 
                                file, "/TCR"), pattern = "annotations")[1]
  TCR.file <- read.csv(paste0("./inputs/data/GSE169440/", 
                              file, "/TCR/", TCR.file))
  combinedTCR <- combineTCR(TCR.file, samples = file, filterMulti = TRUE)

  BCR.file <- list.files(paste0("./inputs/data/GSE169440/", 
                                file, "/BCR"), pattern = "annotations")[1]
  BCR.file <- read.csv(paste0("./inputs/data/GSE169440/", 
                              file, "/BCR/", BCR.file))
  combinedBCR <- combineBCR(BCR.file, samples = file)

  SeuratObj <- combineExpression(c(combinedTCR, combinedBCR), 
                                 SeuratObj, 
                                 cloneCall = "strict", 
                                 proportion = TRUE)

  # 9. scGate Filtering
  suppressWarnings({
    scGateModelDb <- get_scGateDB("data/scGateDB") 
  })
  SeuratObj <- scGate(SeuratObj, scGateModelDb$human$generic)

  cells.to.keep <- which(SeuratObj$is.pure_Tcell == "Pure" | 
                           SeuratObj$is.pure_Bcell == "Pure" | 
                           SeuratObj$is.pure_PlasmaCell == "Pure")
  clones.recovered <- which(!is.na(SeuratObj$CTaa))
  cells.to.keep <- intersect(cells.to.keep, clones.recovered)
  SeuratObj <- subset(SeuratObj, cells = colnames(SeuratObj)[cells.to.keep])

  # 10. Save Preliminary Seurat Object
  saveRDS(SeuratObj, paste0("./inputs/data/processedData/", file, ".rds"))
  rm(SeuratObj)
  gc()
}
```

## Integrate Cohort

```{r warning=FALSE}
dir.create("./output", showWarnings = FALSE)
# 1. Read and merge data
files <- list.files("./inputs/data/processedData/", full.names = TRUE)

object.list <- lapply(files, function(file) {
  readRDS(file)
})

# Use reduce and merge for a more efficient merge
object.merge <- Reduce(function(x, y) merge(x, y), object.list)

# 2. Preprocessing and Integration
object.merge <- object.merge %>%
  NormalizeData(verbose = FALSE) %>%
  FindVariableFeatures(nfeatures = 2500, verbose = FALSE) %>%
  Ibex::quietBCRgenes() %>% # Corrected function call using quietly
  Trex::quietTCRgenes() %>% # Corrected function call using quietly
  ScaleData(verbose = FALSE, 
            vars.to.regress = c("mito.genes")) %>%
  RunPCA(verbose = FALSE) %>%
  RunHarmony("orig.ident", verbose = FALSE)

# 3. Clustering and Visualization
object.merge <- object.merge %>%
  RunUMAP(reduction = "harmony", 
          dims = 1:30, 
          reduction.name = "umap.harmony", 
          verbose = FALSE) %>%
  FindNeighbors(dims = 1:30, 
                reduction = "harmony", 
                verbose = FALSE) %>%
  FindClusters(algorithm = 4, 
               resolution = 0.4,
               verbose = FALSE)

# 4. Defining Cell Types By Cluster
cluster.types <- c("CD4_TCM/Naive", 
                   "CD4_T1_Inf_Stimulated", 
                   "CD4_TH17", 
                   "CD8_Exhausted", 
                   "CD4_Treg", 
                   "CD8_TEM",
                   "CD8_CTL", 
                   "B Cells", 
                   "CD8_TCM/Naive", 
                   "CD4/CD8_Proliferating", 
                   "MAIT", 
                   "Plasma_Cell", 
                   "CD4_TEM", 
                   "Plasma_Cell", 
                   "CD4_TEM")
cluster.types <- setNames(cluster.types, as.character(1:15))
object.merge$Cluster_Types <- recode(as.character(object.merge$seurat_clusters),
                                     !!!cluster.types)

#5. Add patient meta data
object.merge$Patient <- str_remove_all(object.merge$orig.ident, "SKN")
object.merge$Patient <- str_remove_all(object.merge$Patient, "SKL")


#6. Plotting UMAP by Cell type and Clonal Expansion
celltype.palette <- tableau_color_pal(palette = "Tableau 20")(length(unique(object.merge$Cluster_Types)))
object.merge$Cluster_Types <- factor(object.merge$Cluster_Types, 
                                     sort(unique(object.merge$Cluster_Types))[c(2:12,1,13)])

plot1 <- DimPlot(object.merge, group.by = "Cluster_Types", pt.size = 0.1) + 
                  scale_color_manual(values = celltype.palette) + 
                  theme_minimal() + 
                  custom_theme +
                  guides(colour = guide_legend(override.aes = list(size=1))) + 
                  ylab("UMAP2") + 
                  xlab("UMAP1")

plot2 <- DimPlot(object.merge, group.by = "cloneSize") + 
                  scale_color_viridis(option = "inferno", 
                                      discrete = TRUE, 
                                      direction = -1) + 
                  theme_minimal() + 
                  custom_theme + 
                  ylab("UMAP2") + 
                  xlab("UMAP1")

plot1 
ggsave("output/Figure2A.pdf", height = 3, width = 3)

plot2
ggsave("output/Figure2B_P1.pdf", height = 3, width = 3, dpi = 300)

# 6. Save the integrated object
saveRDS(object.merge, "./inputs/data/IntegratedSeuratObject.rds")
```

## Clonal Analysis

### Clonal Proportion

```{r}
object.merge <- readRDS("./inputs/data/IntegratedSeuratObject.rds")

plot1 <- clonalProportion(object.merge,
                          group.by = "Cluster_Types",
                  cloneCall = "strict", 
                  clonalSplit = c(1, 5, 10, 100, 1000, 10000)) + 
                  coord_flip() + 
  scale_x_discrete(limits=rev) + 
  theme(axis.title.y = element_blank(), 
        axis.title = element_text(size=8, color = "black"), 
        axis.text = element_text(size=6, color = "black"))

plot1 
ggsave("output/Figure2B_P2.pdf", height = 2, width = 3)
```

### Seperating B and T Cells

```{r}
T.types <- c("CD4_TCM/Naive", "CD4_T1_Inf_Stimulated","CD4_TH17", 
             "CD8_Exhausted", "CD4_Treg", "CD8_TEM", "CD8_CTL", 
             "CD8_TCM/Naive", "CD4/CD8_Proliferating", "MAIT", 
             "CD4_TEM", "CD4_TEM")
object.TCells <- subset(object.merge, Cluster_Types %in% T.types)
object.BCells <- subset(object.merge, Cluster_Types %!in% T.types)
```

### Comparing Clones

```{r}
plot1 <- clonalCompare(object.TCells,
              cloneCall = "strict",
              top.clones = 20,
              samples = c("192561SKL", "192561SKN"),
              group.by = "orig.ident", 
              palette = "inferno") + 
  guides(fill = "none") + 
  theme(axis.title = element_blank(), 
        axis.text = element_text(size=6, color = "black"))

plot2 <- clonalCompare(object.TCells,
              cloneCall = "strict",
              top.clones = 20,
              samples = c("192565SKL", "192565SKN"),
              group.by = "orig.ident", 
              palette = "inferno") + 
  guides(fill = "none") + 
  theme(axis.title = element_blank(), 
        axis.text = element_text(size=6, color = "black"))

plot3 <- clonalCompare(object.TCells,
              cloneCall = "strict",
              top.clones = 20,
              samples = c("192566","192566SKL","192566SKN"),
              group.by = "orig.ident", 
              palette = "inferno") + 
  guides(fill = "none") + 
  theme(axis.title = element_blank(), 
        axis.text = element_text(size=6, color = "black"))

plot4 <- clonalCompare(object.TCells,
              cloneCall = "strict",
              top.clones = 20,
              samples = c("192567SKL", "192567SKN"),
              group.by = "orig.ident", 
              palette = "inferno") + 
  guides(fill = "none") + 
  theme(axis.title = element_blank(), 
        axis.text = element_text(size=6, color = "black"))

plot1 + plot2 + plot3 + plot4 + plot_layout(ncol = 4)
ggsave("output/Figure2C.pdf", height = 2, width = 4.25)
```

### Clonal Rarefaction

```{r}
plot1 <- clonalRarefaction(object.TCells,
                           group.by = "orig.ident",
                           plot.type = 2,
                           hill.numbers = 1,
                           n.boots = 10) + 
                  xlab("Number of Clones") + 
                  theme_minimal() + 
                  custom_theme + 
  guides(color = "none", fill = "none", lty = "none", shape = "none")

plot2 <- clonalDiversity(object.TCells, 
                group.by = "orig.ident",
                metrics = c("shannon", "inv.simpson"),
                cloneCall = "strict", 
                n.boots = 100) + 
              theme_minimal() + 
              custom_theme 

plot1 + plot2 + plot_layout(ncol = 2, guides = "collect", widths = c(2.5, 1))
ggsave("output/Figure2D.pdf", height = 4, width = 8)
```

### Amino Acid Summarization

```{r}
plot1 <- percentAA(subset(object.BCells, Patient %in% c("192566", "192567")),
                       chain = "IGH",
                       group.by = "Patient") +
              custom_theme 

plot2 <- positionalProperty(subset(object.BCells, Patient %in% 
                                     c("192566", "192567")),
                       chain = "IGH",
                       group.by = "Patient") +
              custom_theme + 
              scale_color_manual(values = viridis_pal(option = "inferno")(5)[c(2,4)]) + 
              scale_fill_manual(values = viridis_pal(option = "inferno")(5)[c(2,4)])

plot1 + plot2 + plot_layout(ncol = 2)
ggsave("output/Figure2E.pdf", height = 2, width = 8)
```

### Percent Genes

```{r}
plot1 <- percentGenes(object.TCells, 
                       gene = "V", 
                       chain = "TRA",
                       group.by = "orig.ident") +
              custom_theme 

df.genes <- percentGenes(object.TCells, 
                         gene = "V", 
                         chain = "TRA",
                         group.by = "orig.ident",
                         exportTable = TRUE)

#Performing PCA
pc <- prcomp(df.genes)

#Getting data frame to plot from
df <- as.data.frame(cbind(pc$x[,1:2], rownames(df.genes)))
df$PC1 <- as.numeric(df$PC1)
df$PC2 <- as.numeric(df$PC2)

#Plotting
plot2 <- ggplot(df, aes(x = PC1, y = PC2)) + 
                geom_point(aes(fill =df[,3]), shape = 21, size = 5) + 
                scale_fill_manual(values = hcl.colors(nrow(df), "inferno")) + 
                theme_minimal() +
                ylab("PC2") + 
                xlab("PC1") + 
               custom_theme +
               guides(fill = guide_legend(title="Samples", 
                                          override.aes = list(size = 0.2)))

plot1 + plot2 + plot_layout(ncol = 2, 
                                            widths = c(1.3, 1))
ggsave("output/Figure2F.pdf", height = 4, width = 9)
```

### Clustering Clones

```{r}
object.TCells <- clonalCluster(object.TCells, 
                              chain = "TRA", 
                              sequence = "aa", 
                              threshold = 0.85, 
                              group.by = "Patient")

DimPlot(object.TCells, 
        group.by = "TRA_cluster", 
        pt.size = 0.2, 
        split.by = "Patient", 
        order = TRUE) +
    scale_color_manual(values =  hcl.colors(n=length(unique(object.TCells@meta.data[,"TRA_cluster"])), "inferno")) + 
 guides(color = "none") + 
  custom_theme + 
  theme(plot.title = element_blank(), 
        axis.title = element_blank())
ggsave("output/Figure2G_P1.pdf", height = 3, width = 9)
```

```{r}
# Define a function for generating and plotting the network
plot_clonal_network <- function(patient_id, color_index, global_vertex_scale) {
  igraph_object <- clonalCluster(
    subset(object.TCells, Patient == patient_id),
    chain = "TRA", 
    sequence = "aa", 
    group.by = "Patient",
    threshold = 0.85, 
    exportGraph = TRUE
  )
  
  # Generate color for the vertices
  col_samples <- hcl.colors(4, "inferno")[color_index]
  
  # Standardize vertex sizes
  vertex_sizes <- igraph::V(igraph_object)$size * global_vertex_scale
  
  # Plot the network with Fruchterman-Reingold layout
  plot(
    igraph_object,
    layout         = layout_with_fr(igraph_object),
    vertex.size    = vertex_sizes,
    vertex.label   = NA,
    edge.arrow.size = 0.05,
    vertex.color   = col_samples,
    main           = paste(patient_id)
  )
}

# Define patient IDs and color indices
patient_ids <- c("192561", "192565", "192566", "192567")
color_indices <- 1:4

# Calculate a global scaling factor for vertex sizes
all_sizes <- unlist(lapply(patient_ids, function(pid) {
  graph <- clonalCluster(
    subset(object.TCells, Patient == pid),
    chain = "TRA",
    sequence = "aa",
    group.by = "Patient",
    threshold = 0.85,
    exportGraph = TRUE
  )
  sqrt(igraph::V(graph)$size)
}))
global_vertex_scale <- 5 / max(all_sizes)  # Scale so max size is 5

pdf("output/Figure2G_P2.pdf", height = 3, width = 9)
# Set up the plotting grid
par(mfrow = c(1,4), mar = c(1, 1, 2, 1))
for (i in seq_along(patient_ids)) {
  plot_clonal_network(patient_ids[i], color_indices[i], global_vertex_scale)
}
dev.off()

```

## Conclusion

```{r}
sessionInfo()
```